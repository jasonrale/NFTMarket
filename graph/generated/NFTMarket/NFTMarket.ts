// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ItemCanceled extends ethereum.Event {
  get params(): ItemCanceled__Params {
    return new ItemCanceled__Params(this);
  }
}

export class ItemCanceled__Params {
  _event: ItemCanceled;

  constructor(event: ItemCanceled) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ItemListed extends ethereum.Event {
  get params(): ItemListed__Params {
    return new ItemListed__Params(this);
  }
}

export class ItemListed__Params {
  _event: ItemListed;

  constructor(event: ItemListed) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class ItemSold extends ethereum.Event {
  get params(): ItemSold__Params {
    return new ItemSold__Params(this);
  }
}

export class ItemSold__Params {
  _event: ItemSold;

  constructor(event: ItemSold) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class NFTMarket__querySaleListResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }

  get currency(): Address {
    return this[2].toAddress();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get buyer(): Address {
    return this[4].toAddress();
  }

  get status(): i32 {
    return this[5].toI32();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }
}

export class NFTMarket__saleListResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: i32;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: i32,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5)),
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getNft(): Address {
    return this.value1;
  }

  getCurrency(): Address {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getBuyer(): Address {
    return this.value4;
  }

  getStatus(): i32 {
    return this.value5;
  }

  getPrice(): BigInt {
    return this.value6;
  }
}

export class NFTMarket extends ethereum.SmartContract {
  static bind(address: Address): NFTMarket {
    return new NFTMarket("NFTMarket", address);
  }

  CANCELED(): i32 {
    let result = super.call("CANCELED", "CANCELED():(uint8)", []);

    return result[0].toI32();
  }

  try_CANCELED(): ethereum.CallResult<i32> {
    let result = super.tryCall("CANCELED", "CANCELED():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  FOR_SALE(): i32 {
    let result = super.call("FOR_SALE", "FOR_SALE():(uint8)", []);

    return result[0].toI32();
  }

  try_FOR_SALE(): ethereum.CallResult<i32> {
    let result = super.tryCall("FOR_SALE", "FOR_SALE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  SOLD(): i32 {
    let result = super.call("SOLD", "SOLD():(uint8)", []);

    return result[0].toI32();
  }

  try_SOLD(): ethereum.CallResult<i32> {
    let result = super.tryCall("SOLD", "SOLD():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  defaultFeeRate(): BigInt {
    let result = super.call("defaultFeeRate", "defaultFeeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_defaultFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultFeeRate",
      "defaultFeeRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  querySaleList(
    nft: Address,
    tokenId: BigInt,
  ): NFTMarket__querySaleListResultValue0Struct {
    let result = super.call(
      "querySaleList",
      "querySaleList(address,uint256):((uint256,address,address,address,address,uint8,uint256))",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return changetype<NFTMarket__querySaleListResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_querySaleList(
    nft: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<NFTMarket__querySaleListResultValue0Struct> {
    let result = super.tryCall(
      "querySaleList",
      "querySaleList(address,uint256):((uint256,address,address,address,address,uint8,uint256))",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTMarket__querySaleListResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  saleList(nft: Address, tokenId: BigInt): NFTMarket__saleListResult {
    let result = super.call(
      "saleList",
      "saleList(address,uint256):(uint256,address,address,address,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return new NFTMarket__saleListResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toI32(),
      result[6].toBigInt(),
    );
  }

  try_saleList(
    nft: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<NFTMarket__saleListResult> {
    let result = super.tryCall(
      "saleList",
      "saleList(address,uint256):(uint256,address,address,address,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarket__saleListResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toI32(),
        value[6].toBigInt(),
      ),
    );
  }

  tokenRecieved(from: Address, value: BigInt, data: Bytes): boolean {
    let result = super.call(
      "tokenRecieved",
      "tokenRecieved(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBoolean();
  }

  try_tokenRecieved(
    from: Address,
    value: BigInt,
    data: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenRecieved",
      "tokenRecieved(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get feeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }
}

export class CancelListCall extends ethereum.Call {
  get inputs(): CancelListCall__Inputs {
    return new CancelListCall__Inputs(this);
  }

  get outputs(): CancelListCall__Outputs {
    return new CancelListCall__Outputs(this);
  }
}

export class CancelListCall__Inputs {
  _call: CancelListCall;

  constructor(call: CancelListCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListCall__Outputs {
  _call: CancelListCall;

  constructor(call: CancelListCall) {
    this._call = call;
  }
}

export class ListNFTCall extends ethereum.Call {
  get inputs(): ListNFTCall__Inputs {
    return new ListNFTCall__Inputs(this);
  }

  get outputs(): ListNFTCall__Outputs {
    return new ListNFTCall__Outputs(this);
  }
}

export class ListNFTCall__Inputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ListNFTCall__Outputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }
}

export class TokenRecievedCall extends ethereum.Call {
  get inputs(): TokenRecievedCall__Inputs {
    return new TokenRecievedCall__Inputs(this);
  }

  get outputs(): TokenRecievedCall__Outputs {
    return new TokenRecievedCall__Outputs(this);
  }
}

export class TokenRecievedCall__Inputs {
  _call: TokenRecievedCall;

  constructor(call: TokenRecievedCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TokenRecievedCall__Outputs {
  _call: TokenRecievedCall;

  constructor(call: TokenRecievedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
